day07

[포인터]

저장공간을 가리키고 있는 주소값

변수 : 값을 담고있는 주소값 (100, 3.14, 'a' 등등...)
포인터 변수 : 주소값을 담는 저장공간

주소 연산자 : &(앰퍼샌드)
참조 연산자 : *(아스타리스크)(변수앞)
포인터 연산자 : 자료형* (변수뒤)


[사용이유]
변수를 사용할 때 변수의 주소로 접근하기 위해서

*어디에 있는 누구의 주소인가?
포인터는 메모리에 저장된 변수의 주소를 저장하는 공간


[포인터 변수 선언 및 초기화 방법]
int num = 30; -> 정수형 데이터를 저장하는 변수
int* pnum; -> 정수형 데이터의 주소를 저장할 수 있는 포인터 변수

pnum = &num -> num의 주소를 포인터 변수 pnum에 대입
&는 오른쪽에 등장하는 피연산자의 주소를 알려준다는 의미

포인터변수 생성시 사용하는 자료형은 주소를 저장할 변수의 자료형을 따라서 적어준다.

어떤 데이터든 항상 같은크기다.


[포인터 연산]

가능한 연산 : 주소를 더하거나 빼는 연산

ptr = ptr + 1;
ptr = ptr - 2;
ptr++; , ++ptr

자기 자신의 값을 증가시키거나 감소시키는 것은 가능하지만 다른
포인터가 기억하고 있는 주소끼리 더하는 작업은 하지 못한다.


주소 연산과 혼동하기 쉬운 연산들
ptr++; : 포인터 변수가 저장한 주소값을 자료형 크기만큼 증가

*ptr++; : 포인터 변수가 저장한 주소의 값에 접근해서 값을 반환하고 
            포인터 변수가 저장한 주소값을 자료형의 크기만큼 증가

(*ptr)++ : 포인터변수가 저장한 변수의 값에 접근하고, 해당 변수의 값을 1 증가

(*ptr++) : ?


[포인터와 배열]

배열 : 같은 자료형의 나열된 변수의 묶음

배열의 특징
1. 모든 요소는 같은 자료형을 가진다.
2. 모든 요소는 물리적으로 연결되어 나열되어 있다.

배열의 이름은 주소를 의미한다.
즉 포인터에 저장 및 포인터 연산을 할 수 있다.

포인터명 = 배열명; 을 하면 배열의 첫번째 주소가 포인터에 저장되므로, 포인터를 1 증가시켰을때
물리적으로 연결된 다음 인덱스로 접근이 가능하다.












