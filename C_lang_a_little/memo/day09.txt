day09

[함수]
어떠한 기능이 있는것

정의 : 여러개의 명령들의 나열된 묶음

출력함수 : 콘솔에 출력을 해주는 기능의 함수
입력함수 : 변수에 값을 입력해주는 함수


기본구조
<함수의 구현부>
자료형 함수명() {
	명령1;
	명령2;
	명령3;

	return 리턴값;

}


<함수의 호출부>
함수명();

이름 뒤에 소괄호가 있으면 함수이다.
단, 키워드 뒤에 소괄호가 있으면 함수가 아니다.
if(), switch(), for(), while()

f(x) = 2x + 1
f(0) = 1
f(1) = 3 .....

f : 함수의 이름
x : 매개변수, 인자, 파라미터, 아규먼츠...
2x + 1 : 리턴값

(1) 반환형 (2) 함수명( (3) 매개변수1....) {
	(4)실행할 문장;
	(5)return 리턴값;
}

(1) 반환형 : 리턴값의 자료형을 따라간다. 만약 리턴값이 없다면 비워두지않고
void라는 타입을 작성해야 한다.

(2) 함수명 : 함수명은 첫글자를 소문자로 작성한다. 

(3) 매개변수 : 외부에서 받을 값이 없다면 생략이 가능, 여러 개의 값을 갖는 다면  매개변수를 여러개
정의할 수 있다.

(4) 실행할 문장 :  생략이 가능하다.

(5) return 리턴값: 반환할 값이 없다면 생략이 가능하다.

함수 선언과 사용구분
{}가 있으면 구현부, {}가 없으면 호출부

함수 구현시 주의사항
함수는 다른 함수안에서 구현할수 없으며, 호출은 반드시 함수안에서 호출이 되야 한다.

함수 선언시 순서
문제) 2x + 1 을 구하는 함수

1. 함수명을 생각한다.
   add(){} -> 선언은 항상 중괄호가 있다.
2. 매개변수가 있나 생각한다.
   f(int x){}
3. 실행할 문장을 작성한다.
   f(int x){
	int num = 2*x + 1;
}
4. 리턴값을 결정한다.
   f(int x) {
	int num = 2*x + 1;
	return num;
   }

5. 반환형의 타입을 결정한다.
int  f(int x) {
	int num = 2*x + 1;
	return num;
            }


함수의 사용
함수명(값);

함수의 형태 4가지

1. 입력값과 반환값이 모두 존재하는 경우 
2. 입력값만 존재하는 경우
3. 반환값만 존재하는 경우
4. 입력값과 반환값이 모두 없는 경우 -> open()

함수를 사용해야 하는 이유
소스코드의 간결화 -> 코드를 반복해서 작성하지 않아도 된다.

리턴을 해야 할 때
호출하는 부분에 작업의 결과를 전달해야 할 때
함수 안에서 모든 작업이 끝나지 않을때

리턴을 안할때
호출하는 부분에서 작업의 결과를 전달할 필요가 없을때
함수 안에서 모든 작업이 끝날때

함수가 너무 많아지면 main함수를 찾기 힘들다.

함수를 메인함수 밑에 구현하는법

함수의 원형, 함수의 프로토타입

#include <stdio.h>

자료형 함수명(매개변수); -> 프로토타입
main(){
함수 호출();

}
함수 구현부 (매개변수){

}


[변수의 생명주기]

변수는 선언된 위치에 따라 부르는 이름이 다르고 영향력이 다르다.

종류		특징			생성			반환
지역변수 : 코드 블록 내에서만 사용가능	코드 블록 시작		코드블록 끝까지
전역변수 : 전체 소스코드에서 사용가능		프로그램 시작		프로그램 종료
정적변수 : 함수가 종결되어도 사용가능		처음 선언한 후		프로그램 종료













                                                                                                                                                                                                                                              